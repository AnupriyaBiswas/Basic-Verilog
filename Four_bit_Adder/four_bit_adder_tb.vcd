$date
	Wed Jan 29 15:35:40 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module four_bit_adder_tb $end
$var wire 4 ! Sum [3:0] $end
$var wire 1 " Cout $end
$var parameter 32 # N $end
$var reg 4 $ A [3:0] $end
$var reg 4 % B [3:0] $end
$var reg 1 & Cin $end
$scope module uut $end
$var wire 4 ' A [3:0] $end
$var wire 4 ( B [3:0] $end
$var wire 1 & Cin $end
$var wire 5 ) carry [4:0] $end
$var wire 4 * Sum [3:0] $end
$var wire 1 " Cout $end
$var parameter 32 + N $end
$scope begin adder_loop[0] $end
$var parameter 2 , i $end
$scope module FA $end
$var wire 1 - A $end
$var wire 1 . B $end
$var wire 1 / Cin $end
$var wire 1 0 Cout $end
$var wire 1 1 Sum $end
$upscope $end
$upscope $end
$scope begin adder_loop[1] $end
$var parameter 2 2 i $end
$scope module FA $end
$var wire 1 3 A $end
$var wire 1 4 B $end
$var wire 1 5 Cin $end
$var wire 1 6 Cout $end
$var wire 1 7 Sum $end
$upscope $end
$upscope $end
$scope begin adder_loop[2] $end
$var parameter 3 8 i $end
$scope module FA $end
$var wire 1 9 A $end
$var wire 1 : B $end
$var wire 1 ; Cin $end
$var wire 1 < Cout $end
$var wire 1 = Sum $end
$upscope $end
$upscope $end
$scope begin adder_loop[3] $end
$var parameter 3 > i $end
$scope module FA $end
$var wire 1 ? A $end
$var wire 1 @ B $end
$var wire 1 A Cin $end
$var wire 1 B Cout $end
$var wire 1 C Sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b11 >
b10 8
b1 2
b0 ,
b100 +
b100 #
$end
#0
$dumpvars
0C
0B
0A
0@
0?
0=
0<
0;
0:
09
07
06
05
04
03
01
00
0/
0.
0-
b0 *
b0 )
b0 (
b0 '
0&
b0 %
b0 $
0"
b0 !
$end
#10
1C
1A
1<
1;
16
15
b1110 )
10
07
b1000 !
b1000 *
0=
1.
14
1-
19
b11 %
b11 (
b101 $
b101 '
#20
b1001 !
b1001 *
11
1/
04
13
b1111 )
1&
b1 %
b1 (
b111 $
b111 '
#30
1"
0C
1B
b0 !
b0 *
01
0/
1?
b11110 )
0&
b1111 $
b1111 '
#40
1=
0;
06
17
05
00
0A
0C
0<
b111 !
b111 *
11
1/
0.
1:
1@
0-
09
b10001 )
1&
b1100 %
b1100 (
b1010 $
b1010 '
#50
